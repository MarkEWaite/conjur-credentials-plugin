<?xml version="1.0" encoding="UTF-8"?>
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core"
         xmlns:st="jelly:stapler"
         xmlns:d="jelly:define"
         xmlns:l="/lib/layout"
         xmlns:t="/lib/hudson"
         xmlns:f="/lib/form">
    <f:section title="${%Conjur Appliance}">
        <f:property field="conjurConfiguration" header="${%Conjur Configuration}"/>
    </f:section>
    <f:section title="${%Conjur JWT Authentication}">
        <f:entry title="${%Enable JWT Key Set endpoint?}" description="The JWT Key Set Endpoint will be:BASEURLFORJENKINS/jwtauth/conjur-jwk-set">
            <f:checkbox name="enableJWKS" field="enableJWKS" default="false" checked="${enableJWKS}"/>
        </f:entry>
        <f:entry title="${%Auth WebService ID}">
            <f:textbox field="authWebServiceId" name="authWebServiceId"/>
        </f:entry>
        <f:entry title="${%JWT Audience}">
        <!-- Deprecation warning -->
        <!-- <f:warning>Warning Deprecation: From Next Major version, this field will be deprecated and field is defualt to "cyberark-conjur".</f:warning>-->
            <f:textbox field="jwtAudience" name="jwtAudience"/>
        </f:entry>
        <div class="warning" style="margin-top: -1.25rem;opacity: 1;">From Next Major version, this field will be deprecated and field is defualt to "cyberark-conjur". </div>
        <f:entry title="${%Signing Key Lifetime In Minutes}">
            <f:textbox field="keyLifetimeInMinutes" name="keyLifetimeInMinutes"/>
        </f:entry>
        <f:entry title="${%JWT Token Duration In Seconds}">
            <f:textbox field="tokenDurarionInSeconds" name="tokenDurarionInSeconds"/>
        </f:entry>
        <f:entry title="${%Enable Context Aware Credential Stores?}" description="If checked, Conjur Credential Provider will populate stores with secret variables available from the current context">
            <f:checkbox name="enableContextAwareCredentialStore" field="enableContextAwareCredentialStore" default="false" checked="${enableContextAwareCredentialStore}"/>
        </f:entry>
        <f:entry title="${%Enable Identity Format Fields From Token?}" description="If checked,populate variables available from the current context">
            <f:checkbox id="enableIdentityFormatFieldsFromToken" name="enableIdentityFormatFieldsFromToken" field="enableIdentityFormatFieldsFromToken" default="false"/>
        </f:entry>
        <div id="divIdentityFieldName">
        <f:entry title="${%Identity Field Name}">
            <!-- Deprecation warning -->
            <!--<f:warning>Warning Deprecation: Identity field name will be removed from next major version.</f:warning>-->
            <f:textbox id="identityFieldName" field="identityFieldName" name="identityFieldName" description="Name of the field to be added to JWT claim to possibly use it as identity"/>
        </f:entry>
        </div>
        <div class="warning" style="margin-top: -1.25rem;opacity: 1;" id="dviWarning">Identity field name will be removed from next major version. </div>

        <div id="divListIdentityFormatFieldsFromToken"  style="display: none;">
        <f:entry title="${%Identity Format Fields}" name="selectIdentityFormatToken" field="selectIdentityFormatToken">
           <select id="listIdentityFormatFieldsFromToken" name="selectIdentityFormatToken" class="jenkins-select_input">
                <option value="aud,jenkins_name">${%aud,jenkins_name}</option>
                 <option value="jenkins_full_name">${%jenkins_full_name}</option>
                 <option value="jenkins_parent_name">${%jenkins_parent_name}</option>
                 <option value="jenkins_parent_full_name">${%jenkins_parent_full_name}</option>
                 <option value="jenkins_parent_full_name,jenkins_name">${%jenkins_parent_full_name,jenkins_name}</option>
           </select>
        </f:entry>
        </div>
        <div id="identityFormatFieldsFromToken">
        <f:entry title="${%Identity Format Fields}">
            <f:textbox id ="identityFormatFieldsFromToken" field="identityFormatFieldsFromToken" name="identityFormatFieldsFromToken" description="Comma separated fields from JWT Token to create identity field"/>
        </f:entry>
        </div>
        <div id="divIdentityFieldsSeparator" style="display: none;">
       <f:entry title="${%Identity Fields Separator}" name="selectIdentityFieldsSeparator" field="selectIdentityFieldsSeparator">
           <!-- Deprecation warning -->
           <!--<f:warning>Warning Deprecation: Identity field separator will be removed from next major version.</f:warning>-->
         <select id="listIdentityFieldsSeparator" name="selectIdentityFieldsSeparator" class="jenkins-select_input">
                 <option value="-">${%-}</option>
                 <option value="+">${%+}</option>
                 <option value=".">${%.}</option>
                 <option value=":">${%:}</option>
                 <option value="|">${%|}</option>
         </select>
       </f:entry>
        </div>

         <div class="warning" style="margin-top: -1.25rem;opacity: 1;" id="dviWarningSeperator">Identity field separator will be removed from next major version. </div>
        <div id="identityFieldsSeparator">
        <f:entry title="${%Identity Fields Separator}">
            <f:textbox id="identityFieldsSeparator" field="identityFieldsSeparator" name="identityFieldsSeparator" description="Separator to place between format fields for identity"/>
        </f:entry>
        </div>
    </f:section>

  <script type="text/javascript">
      // Function to set value based on checkbox state
      document.getElementById('enableIdentityFormatFieldsFromToken').addEventListener('change', getIdentityFormatToken);

      function getIdentityFormatToken() {
       var selectIdentityFormatTokenValue ='${instance.selectIdentityFormatToken}';
       selectIdentityFormatTokenValue =selectIdentityFormatTokenValue ? selectIdentityFormatTokenValue : 'jenkins_name';

       var selectIdentityFieldsSeparatorValue = '${instance.selectIdentityFieldsSeparator}';
        console.log("param.selectIdentityFieldsSeparatorValue:" +selectIdentityFieldsSeparatorValue);
        // Set default value if selectIdentityFieldsSeparator is empty
        selectIdentityFieldsSeparatorValue = selectIdentityFieldsSeparatorValue ? selectIdentityFieldsSeparatorValue : '-';
        console.log("After param.selectIdentityFieldsSeparatorValue:" +selectIdentityFieldsSeparatorValue);


          var inputEnableIdentityCheckedToken = document.getElementById('enableIdentityFormatFieldsFromToken');
          var divTxtIdentityFieldName =document.getElementById('divIdentityFieldName');
          var txtIdentityFieldName = document.getElementById('identityFieldName');
          var divSelectedIdentityFormatFiledToken = document.getElementById("divListIdentityFormatFieldsFromToken");
          var selectedIdentityFormatFiledToken = document.getElementById("listIdentityFormatFieldsFromToken");
          var inputIdentityToken = document.getElementById("identityFormatFieldsFromToken");
          var divSelectedIdentityFieldsSeparator = document.getElementById("divIdentityFieldsSeparator");
          var selectedIdentityFieldsSeparator = document.getElementById("listIdentityFieldsSeparator");
          var inputIdentityFieldsSeparator = document.getElementById("identityFieldsSeparator");
          var divWarningMsg = document.getElementById("dviWarning");
          var divWarningSeparatorMsg = document.getElementById("dviWarningSeperator");

          // If checkbox is checked, set default textbox value, otherwise clear its value
          if (inputEnableIdentityCheckedToken.checked) {
              divTxtIdentityFieldName.style.display = "none";
              txtIdentityFieldName.style.display = "none";
              divSelectedIdentityFormatFiledToken.style.display = "block";
              inputIdentityToken.style.display = "none";
              divSelectedIdentityFieldsSeparator.style.display = "none";
              inputIdentityFieldsSeparator.style.display = "none";
              selectedIdentityFormatFiledToken.value=selectIdentityFormatTokenValue;
              divWarningMsg.style.display = "none";
              divWarningSeparatorMsg.style.display = "none";
          } else {
              divTxtIdentityFieldName.style.display = "block";
              txtIdentityFieldName.style.display = "block";
              divSelectedIdentityFormatFiledToken.style.display = "none";
              inputIdentityToken.style.display = "block";
              divSelectedIdentityFieldsSeparator.style.display = "block";
              inputIdentityFieldsSeparator.style.display = "none";
              selectedIdentityFieldsSeparator.value=selectIdentityFieldsSeparatorValue;
              divWarningMsg.style.display = "block";
          }
      }
      // Call the function initially to set the initial state based on checkbox
      getIdentityFormatToken();
  </script>

       <style type="text/css">
           .jenkins-select_input {
             color: black;
             font-weight: normal;
             border:2px solid var(--input-border);
             border-radius:6px;
             box-shadow:0 0 0 10px transparent;
             display: block;
             max-width: 100% !important;
             min-height: 38px;
             padding: 8px;
             transition: var(--standard-transition);
             width: 100% !important;
           }


   </style>
</j:jelly>
